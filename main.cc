// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

/*  Object-oriented Programming in C++, Professor Doug Ferguson
 *  JHU EP, Summer 2014 *
 *  20140711, Mike Ricci
 *  HW5: BOM
 *	 main.cpp *
 *  SUMMARY
 * *
 *  INPUT:
 *
 *  OUTPUT:
 * *
 *  LIMITATIONS: Code was generated using the Eclipse Papyrus plugin.  Data types
 *  used in the UML diagram did not translate to the data types used in C++
 *  assignments completed previously.  Therefore, changes to the generated code 
 *  were required before compilation.  Additional changes to the overall design
 *  were implemented during development; revisions to the diagram were made to
 *  reflect these changes.
 */

#define Model_main_BODY

/************************************************************
 main class body
 ************************************************************/

// Derived includes directives
#include <iostream>
#include <array>
#include <fstream> // REMOVE AFTER TESTING
#include <sstream> // REMOVE AFTER TESTING
#include <boost/tokenizer.hpp> // REMOVE AFTER TESTING
#include "KitList.h"

using namespace std;

std::map<std::string, Part> Kit::partsCatalog; // avoid undefined reference error

int main()
{
	////////////////////
	//PART CLASS TESTING
	////////////////////
	
/*	Part test = Part("Test Part", "This is a test part description");
	
	cout << "partNo: " << test.getPartNo() << '\n';
	cout << "desc: " << test.getDesc() << '\n';

	test.setPartNo("Revised Test Part");
	test.setDesc("Revised Description");

	cout << "partNo: " << test.getPartNo() << '\n';
	cout << "desc: " << test.getDesc() << '\n';*/

	///////////////////
	//KIT CLASS TESTING
	///////////////////

	//Kit testKit = Kit("/home/reechee/Documents/Cpp/HW5/CSV/HW5-BillOfMaterialWithVBScript-5A40_Combo.csv");

/*	typedef boost::tokenizer<boost::escaped_list_separator<char> > Tokenizer;
	string line;
	string kitNo;
	
	ifstream CSV;
	CSV.open("/home/reechee/Documents/Cpp/HW5/CSV/test.csv");

	if(CSV.is_open())
	{
		getline(CSV,line);
		Tokenizer tok(line);
		Tokenizer::iterator iter = tok.begin();
		kitNo = *iter;
		//cout << "XXX" << kitNo << "XXX" <<'\n';

		//get(CSV,line);
		cout << "XXX" << line << "XXX" <<'\n';*/
		
/*		while(getline(CSV, line))
		{
			cout<<line << '\n';
			Tokenizer tok(line);

			for(Tokenizer::iterator iter = tok.begin(); iter != tok.end(); ++iter)
			{
				cout << *iter << '\n';
			}
		}
		//CSV.close();
	}
	else 
	{
		std::cout << "Unable to open file"; 
	}*/

/*	cout << "line: " << "2,Small Grommet,\"9/16\"\" OD  Chassis Grommets\",," << '\n';
	Kit testKit = Kit();
	array<std::string, 3> test = testKit.parseLine("2,Small Grommet,\"9/16\"\" OD  Chassis Grommets\",,");
	cout << "test[0]: " << test[0] << '\n';
	cout << "test[1]: " << test[1] << '\n';
	cout << "test[2]: " << test[2] << '\n';*/

	/////////////
	//FINAL MAIN
	/////////////
	
/*	KitList list1 = KitList(FILEPATH);

	array<std::string,10> parts = {"Bolt-SKT",
								   "FH-2",
							       "CCW-5E3",
								   "Nut-#8-32",
								   "W025130 (EU)",
								   "12A150A-50",
								   "6N-4",
								   "MFR220K-.5",
								   "#8 sheet metal screw",
								   "PJP-S"};

	for(int i = 0; i < 10; ++i)
	{
		list1.queryPart(parts[i]);
	}*/

	return 0;
}

/************************************************************
 End of main class body
 ************************************************************/
