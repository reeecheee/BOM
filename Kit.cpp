// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

/*  Kit.cpp
 * 
 *  Source file for the Kit class: This class represents a kit through it's kit 
 *  name and composing parts' numbers and quantities required.  Functions are 
 *  provided to construct a new kit object from a CSV file describing it, get 
 *  and set the kit's name, and to add parts to the kit.
 */

/************************************************************
 Kit class body
 ************************************************************/

// include associated header file
#include "Kit.h"

//CONSTRUCTOR
Kit::Kit()
{

}

Kit::Kit(std::string /*in*/filepath) 
{
	//typedef boost::tokenizer<boost::escaped_list_separator<char> > Tokenizer;
	std::string line;
	std::string kitNo;
	std::array<std::string,3> toks; //store tokens from line n
	
	std::ifstream CSV;
	CSV.open(filepath);

	if(CSV.is_open())
	{
		std::getline(CSV,line); // get first line
		toks = this->parseLine(line); // tokenize first line
		this->kitNo = toks[0]; // set kitNo

		std::getline(CSV,line); // skip line 2 ("Bill of Materials")
		std::getline(CSV,line); // skip line 3 (",,")
		std::getline(CSV,line); // skip line 4 ("Qty,Part Number,Description")

		while(getline(CSV, line))
		{
			toks = this->parseLine(line); // tokenize and store line n
			//toks[0] = quantity
			//toks[1] = part number
			//toks[2] = description

			//Scenario 1: standard case
			//toks[0] contains valid quantity
			//toks[1] contains valid part number
			//toks[2] contains valid description

			//Scenario 2: append description
			//toks[0] contains junk chars
			//toks[1] is empty
			//toks[2] contains valid description to append to last part's desc

			//Scenario 3: append description
			//toks[0] is empty
			//toks[1] contains valid description to append to last part's desc
			//toks[2] is empty 

			//Scenario 4: blank
			//toks[0] is empty
			//toks[1] is empty
			//toks[2] is empty 

			//Scenario 5: variable quantity part
			//toks[0] is empty
			//toks[1] contains valid part number
			//toks[2] contains valid description 
			

			

			
		}
		CSV.close();
	}
	else
	{
		std::cout << "Unable to open file.";
	}
}

//VIRTUAL DESCTRUCTOR
Kit::~Kit()
{

}

//MEMBER FUNCTIONS

//The function addPart() adds the part number and qty to the kit object's map.
//It also adds the part to the master listing of parts shared among all instances
//of the kit class (if the part does not already exist).
void Kit::addPart(std::string partNo, std::string qty, std::string desc) 
{
	this->parts.insert(make_pair(partNo, qty));
	this->partsCatalog.insert(make_pair(partNo, Part(partNo, desc)));
}

//The function appendDesc() appends the passed desc string to the end of the
//existing description string for the given part number in the partsCatalog.
void Kit::appendDesc(std::string partNo, std::string desc)
{
	std::string tempDesc = this->partsCatalog.at(partNo).getDesc();
	this->partsCatalog.at(partNo).setDesc(tempDesc + desc);
}

//The function parseLine() takes a part line from the CSV files and splits it 
//into the appropriate tokens.
std::array<std::string,3> Kit::parseLine(std::string line)
{
	bool quoteTok = false; // tracks tokenizing when "blah, blah, blah"
	std::array<std::string, 3> toks; // stores qty, partNo, desc tokens
	int tokInd = 0; // 0 = qty, 1 = partNo, 2 = desc
	std::stringstream ss; //stream to feed chars of tokens into
	
	for(char& c : line) // iterate through line, char by char
	{
		//std::cout << "c: " << c << '\n'; //REMOVE AFTER TESTING
		
		if(quoteTok == false) // iterating through a qty or partNo?
		{
	 		if(c != ',' && c != '"') // char belongs in token
			{
				ss << c;
			}
			
			if(c == ',') // delimiting char?
			{
				if(tokInd < 3) // don't run off end of toks
				{
					toks[tokInd] = ss.str(); //assign stream to tok element
					++tokInd; // increment token index
					ss.str(std::string()); // clear the stream
				}
			}
			
			if(c == '"') // entering desc token?
			{
				quoteTok = true;
			}
		}
		else if(quoteTok == true) // iterating through a desc?
		{
			if(c != '"')
			{
				ss << c;
			}
			else if(c == '"')
			{
				if(tokInd < 3) // don't run off end of toks
				{
					toks[tokInd] = ss.str(); //assign stream to tok element
					quoteTok = false;
				}
			}
		}
	}
	
	if(tokInd < 3) // don't run off end of toks
	{
		toks[tokInd] = ss.str();
	}
	
	return toks;
}

//The function getKitNo() returns the kit object's kit number as a string.
std::string Kit::getKitNo() 
{
	return this->kitNo;
}

//The function setKitNo() sets the kit objects kit number to the passed string.
void Kit::setKitNo(std::string /*in*/kitNo) 
{
	this->kitNo = kitNo;
}

/************************************************************
 End of kit class body
 ************************************************************/