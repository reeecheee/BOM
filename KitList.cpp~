// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

/*  KitList.cpp
 * 
 *  Source file for the KitList class: This class represents a group of kits and
 *  contains their kit and part objects.  Functions are provided to add kits and
 *  parts to the maps.
 */

/************************************************************
 kitList class body
 ************************************************************/

// include associated header file
#include "KitList.h"
#include "Kit.h"

//CONSTRUCTOR
KitList::KitList(std::string path)
{
	boost::filesystem::directory_iterator it (path);

	for(it; it != boost::filesystem::directory_iterator(); ++it)
	{
		Kit tempKit = Kit(it->path().generic_string());
		this->kits.insert(make_pair(tempKit.getKitNo(), tempKit));
	}
}

//VIRTUAL DESTRUCTOR
KitList::~KitList()
{

}

//MEMBER FUNCTIONS

//The function addKit() creates a kit object in the kits map with the passed name.
void KitList::addKit(std::string kitNo)
{
	Kit tempKit = Kit();
	tempKit.setKitNo(kitNo);
	this->kits.insert(std::pair<std::string, Kit>(kitNo, tempKit));
}

//The function addPart() creates a part object in the parts map with the passed
//name and description.
void KitList::addPart(std::string partNo, std::string desc)
{
	//this->parts.insert(std::pair<std::string, Part>(partNo, Part(partNo, desc)));
}

//The function appendDesc() adds more to the description of a part in the parts map.
void KitList::appendDesc(std::string partNo, std::string desc)
{
	//std::string tempDesc = this->parts.at(partNo).getDesc();
	//this->parts.at(partNo).setDesc(tempDesc + desc);
}

//The function queryPart searches the kit objects contained in the kits map for
//instances of the passed part number.  It prints to the console the names of the
//kits which include the part and the quantity they require.
void KitList::queryPart(std::string partNo) const
{
	bool found = false;
	
	//print the partNo queried and it's description from the catalog
	std::cout << "------------------------------------------------" << '\n';
	std::cout << "Part: " << partNo << '\n';
	std::map<std::string, Kit>::const_iterator iter = this->kits.begin();
	std::cout << "Description: " << iter->second.getDesc(partNo) << '\n';
	std::cout << "------------------------------------------------" << '\n';
	
	//iterate through all kits
	for(auto& iter : kits)
	{
		if(iter.second.hasPart(partNo))
		{
			found = true;
			std::cout << iter.second.getKitNo() << ", Qty: " 
						 << iter.second.partQty(partNo) << '\n';
		}
	}

	if(found == false)
	{
		std::cout << "was not found in any kits." << '\n';
	}
}

/************************************************************
 End of kitList class body
 ************************************************************/